# python bot.py
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
CHANNEL_USERNAME = "ukzbir"  
PAYMENT_LINK = "https://send.monobank.ua/jar/8213RMymLZ"

# Google Sheets setup

# scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
# credentials = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
# client = gspread.authorize(credentials)
# sheet = client.open("UKbot").sheet1

import os
import json
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –°–∫–æ—É–ø–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ Google Sheets —Ç–∞ Google Drive
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]

# –û—Ç—Ä–∏–º—É—î–º–æ JSON –∑—ñ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
creds_json = os.getenv("GOOGLE_CREDS_JSON")
if creds_json is None:
    raise ValueError("GOOGLE_CREDS_JSON –∑–º—ñ–Ω–Ω–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ JSON —è–∫ —Å–ª–æ–≤–Ω–∏–∫
creds_dict = json.loads(creds_json)

# –°—Ç–≤–æ—Ä—é—î–º–æ credentials –∑ dict
credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)

# –ê–≤—Ç–æ—Ä–∏–∑—É—î–º–æ—Å—å —á–µ—Ä–µ–∑ gspread
client = gspread.authorize(credentials)

# –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é
sheet = client.open("UKbot").sheet1

# FSM –¥–ª—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
class Form(StatesGroup):
    name = State()
    surname = State()
    phone = State()
    proof = State()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É (3-–∑–Ω–∞—á–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–∞–ø–∏—Å—ñ–≤ +1)
def generate_certificate_number():
    try:
        next_number = len(sheet.get_all_values())
        return f"{next_number:03d}"  # 001, 002, 003 ...
    except Exception:
        return "001"

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await message.answer(
        "üá∫üá¶ –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –£-–ö–≤–∞—Ä—Ç–∞–ª—É, –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —è–∫–æ–≥–æ –º–∏ –∑–±–∏—Ä–∞—î–º–æ 200 000 –≥—Ä–Ω –Ω–∞ —Ä–µ–º–æ–Ω—Ç –ª—ñ–∫–∞—Ä–Ω—è–Ω–∏—Ö –ø–∞–ª–∞—Ç —É –≤—ñ–π—Å—å–∫–æ–≤–æ–º—É –≥–æ—Å–ø—ñ—Ç–∞–ª—ñ üè•‚ú®\n\n"
        "üíõ –ó–∞ —Ç–≤—ñ–π –¥–æ–Ω–∞—Ç –≤—ñ–¥ 500 –≥—Ä–Ω —Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç—Ä–∏–º—É—î—à —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç üéüÔ∏è –Ω–∞ –ø–æ–≤–Ω–∏–π –¥–µ–Ω—å –≤ U-Wellness Space üßñ‚Äç‚ôÇÔ∏èüåø\n\n"
        "–î–ª—è –ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º‚Äô—è: üìùüòä"
    )
    await state.set_state(Form.name)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ
@dp.message(Form.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –ø—Ä—ñ–∑–≤–∏—â–µ:")
    await state.set_state(Form.surname)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä—ñ–∑–≤–∏—â–∞
@dp.message(Form.surname)
async def get_surname(message: Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    await state.set_state(Form.phone)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É —ñ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É
@dp.message(Form.phone)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer(
        f"üí≥ <b>–î—è–∫—É—î–º–æ –∑–∞ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏!</b>\n\n"
        f"–û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–±–æ—Ä—É:\nüëâ <a href='{PAYMENT_LINK}'>–û–ø–ª–∞—Ç–∏—Ç–∏ —Ç—É—Ç</a>\n\n"
        "‚úÖ –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, <b>–Ω–∞–¥—ñ—à–ª–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç</b> –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º –ø–µ—Ä–µ–∫–∞–∑—É üôè"
    )
    await state.set_state(Form.proof)

# –û–±—Ä–æ–±–∫–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É –∑ –æ–ø–ª–∞—Ç–æ—é
@dp.message(Form.proof, F.photo)
async def process_proof(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data['name']
    surname = data['surname']
    phone = data['phone']
    photo = message.photo[-1]  # –Ω–∞–π–≤–∏—â–∞ —è–∫—ñ—Å—Ç—å
    file_id = photo.file_id

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É
    cert_number = generate_certificate_number()

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª —ñ –æ—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    sent_msg = await bot.send_photo(
        chat_id=CHANNEL_ID,
        photo=file_id,
        caption=(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –≤—ñ–¥: <b>{name} {surname}</b>\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É: {PAYMENT_LINK}\n"
            f"üé´ –ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É: {cert_number}"
        )
    )

    # –§–æ—Ä–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ
    message_link = f"https://t.me/{CHANNEL_USERNAME}/{sent_msg.message_id}"

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ç–∞–±–ª–∏—Ü—é: —ñ–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ, —Ç–µ–ª–µ—Ñ–æ–Ω, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ, –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É
    sheet.append_row([name, surname, phone, message_link, cert_number])

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ –Ω–æ–º–µ—Ä–æ–º —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É —ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
    await message.answer(
        f"{name}, –¥—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å —É –±–ª–∞–≥–æ–¥—ñ–π–Ω–æ–º—É –∑–±–æ—Ä—ñ!\n\n"
        f"üíôüíõ –¢–≤–æ—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ ‚Äî —Ü–µ –∫—Ä–æ–∫ –¥–æ –ø–µ—Ä–µ–º–æ–≥–∏ –π —Ç—É—Ä–±–æ—Ç–∏ –ø—Ä–æ –Ω–∞—à–∏—Ö –∑–∞—Ö–∏—Å–Ω–∏–∫—ñ–≤!\n\n"
        f"üé´ –í–∞—à –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É:üéâ<b>{cert_number}</b>üéâ\n\n"
        f"üìç  –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –º–æ–∂–Ω–∞ —É U-Wellness Space –∑ 29 —Å–µ—Ä–ø–Ω—è\n"
        f"üóìÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –π–æ–≥–æ –º–æ–∂–Ω–∞ –≤–ø—Ä–æ–¥–æ–≤–∂ –≤–µ—Ä–µ—Å–Ω—è —É –±—É–¥—å-—è–∫–∏–π –¥–µ–Ω—å!\n\n"
    )
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
