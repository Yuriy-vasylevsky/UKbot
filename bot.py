
# —Ä–æ–±–æ—á–∞ –≤–µ—Ä—Å—ñ—è 

# from aiogram import Bot, Dispatcher, types, F
# from aiogram.types import Message, FSInputFile
# from aiogram.enums import ParseMode
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import StatesGroup, State
# from aiogram.fsm.storage.memory import MemoryStorage
# from aiogram.client.default import DefaultBotProperties

# import gspread
# from oauth2client.service_account import ServiceAccountCredentials
# import uuid
# import os

# # –ë–æ—Ç
# BOT_TOKEN = "8371853976:AAGxedICmLKYvjxSeQqBiZn_N95Hv0hrA1I"
# bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
# dp = Dispatcher(storage=MemoryStorage())

# # Google Sheets –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
# gc = gspread.service_account(filename="credentials.json")
# spreadsheet = gc.open("UKbot")
# worksheet = spreadsheet.sheet1

# # –°—Ç–∞–Ω
# class Form(StatesGroup):
#     name = State()
#     surname = State()
#     phone = State()
#     proof = State()

# # –°—Ç–∞—Ä—Ç
# @dp.message(F.text == "/start")
# async def start(message: Message, state: FSMContext):
#     await message.answer(
#         "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è —É—á–∞—Å—Ç—ñ —É <b>–±–ª–∞–≥–æ–¥—ñ–π–Ω–æ–º—É –∑–±–æ—Ä—ñ</b> üéüÔ∏è\n\n"
#         "–ó–∞—Ä–∞–∑ —è –∑–∞—Ñ—ñ–∫—Å—É—é —Ç–≤–æ—ó –¥–∞–Ω—ñ, –∞ –ø–æ—Ç—ñ–º —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É."
#     )
#     await message.answer("–í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, <b>—Å–≤–æ—î —ñ–º º—è</b>:")
#     await state.set_state(Form.name)

# @dp.message(Form.name)
# async def process_name(message: Message, state: FSMContext):
#     await state.update_data(name=message.text)
#     await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ <b>–ø—Ä—ñ–∑–≤–∏—â–µ</b>:")
#     await state.set_state(Form.surname)

# @dp.message(Form.surname)
# async def process_surname(message: Message, state: FSMContext):
#     await state.update_data(surname=message.text)
#     await message.answer("–í–≤–µ–¥–∏ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>:")
#     await state.set_state(Form.phone)

# @dp.message(Form.phone)
# async def process_phone(message: Message, state: FSMContext):
#     await state.update_data(phone=message.text)
#     await message.answer("üîó <b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É:</b>\nhttps://send.monobank.ua/jar/XXXXXXXXXX\n\n–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –ø—Ä–∏—à–ª–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç.")
#     await state.set_state(Form.proof)

# @dp.message(Form.proof, F.photo)
# async def process_proof(message: Message, state: FSMContext):
#     data = await state.get_data()
#     participant_id = str(uuid.uuid4())[:4].upper()

#     # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ Google –¢–∞–±–ª–∏—Ü—é
#     worksheet.append_row([
#         participant_id,
#         data['name'],
#         data['surname'],
#         data['phone']
#     ])

#     # –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—î —Ñ–æ—Ç–æ (–Ω–∞–π–±—ñ–ª—å—à–∞ —è–∫—ñ—Å—Ç—å)
#     photo = message.photo[-1]
#     file = await bot.get_file(photo.file_id)

#     # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
#     os.makedirs("screenshots", exist_ok=True)
#     destination_path = f"screenshots/{participant_id}.jpg"
#     file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

#     # –°–∫–∞—á–∞—Ç–∏ —á–µ—Ä–µ–∑ aiohttp (–æ—Å–∫—ñ–ª—å–∫–∏ bot.download –º–æ–∂–µ —ñ–Ω–æ–¥—ñ –¥–∞–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏)
#     import aiohttp
#     async with aiohttp.ClientSession() as session:
#         async with session.get(file_url) as resp:
#             if resp.status == 200:
#                 with open(destination_path, "wb") as f:
#                     f.write(await resp.read())

#     await message.answer(
#         f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å —É –∑–±–æ—Ä—ñ!\n"
#         f"–¢–≤—ñ–π –Ω–æ–º–µ—Ä: <b>{participant_id}</b>.\n"
#         f"–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ üíô"
#     )

#     await state.clear()
# # –ó–∞–ø—É—Å–∫
# if __name__ == "__main__":
#     import asyncio
#     asyncio.run(dp.start_polling(bot))


# python bot.py

# –∑–±–µ—Ä—ñ–≥–∞—î —Å–∫—Ä—ñ–Ω–∏ –≤ —Ç–≥

# import asyncio
# from aiogram import Bot, Dispatcher, types, F
# from aiogram.types import Message
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import State, StatesGroup
# from aiogram.fsm.storage.memory import MemoryStorage
# from aiogram.enums import ParseMode

# import gspread
# from oauth2client.service_account import ServiceAccountCredentials

# BOT_TOKEN = "8371853976:AAGxedICmLKYvjxSeQqBiZn_N95Hv0hrA1I"
# CHANNEL_ID = -1002575438586  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ ID —Ç–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É

# # Google Sheets setup
# scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
# credentials = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
# client = gspread.authorize(credentials)
# sheet = client.open("UKbot").sheet1

# # FSM –¥–ª—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
# class Form(StatesGroup):
#     name = State()
#     surname = State()
#     phone = State()
#     proof = State()

# # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
# bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
# dp = Dispatcher(storage=MemoryStorage())

# # –ö–æ–º–∞–Ω–¥–∞ /start
# @dp.message(F.text == "/start")
# async def start(message: Message, state: FSMContext):
#     await message.answer(
#         "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –∑–±–æ—Ä—É –Ω–∞ –±–ª–∞–≥–æ–¥—ñ–π–Ω—ñ—Å—Ç—å.\n\n"
#         "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º‚Äô—è:"
#     )
#     await state.set_state(Form.name)

# # –Ü–º‚Äô—è
# @dp.message(Form.name)
# async def get_name(message: Message, state: FSMContext):
#     await state.update_data(name=message.text)
#     await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –ø—Ä—ñ–∑–≤–∏—â–µ:")
#     await state.set_state(Form.surname)

# # –ü—Ä—ñ–∑–≤–∏—â–µ
# @dp.message(Form.surname)
# async def get_surname(message: Message, state: FSMContext):
#     await state.update_data(surname=message.text)
#     await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
#     await state.set_state(Form.phone)

# # –¢–µ–ª–µ—Ñ–æ–Ω
# @dp.message(Form.phone)
# async def get_phone(message: Message, state: FSMContext):
#     await state.update_data(phone=message.text)
#     await message.answer("–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –æ–ø–ª–∞—Ç–æ—é:")
#     await state.set_state(Form.proof)

# # –°–∫—Ä–∏–Ω—à–æ—Ç
# @dp.message(Form.proof, F.photo)
# async def process_proof(message: Message, state: FSMContext):
#     data = await state.get_data()
#     name = data['name']
#     surname = data['surname']
#     phone = data['phone']

#     photo = message.photo[-1]  # –Ω–∞–π–≤–∏—â–∞ —è–∫—ñ—Å—Ç—å
#     file_id = photo.file_id

#     # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª
#     await bot.send_photo(
#         chat_id=CHANNEL_ID,
#         photo=file_id,
#         caption=f"‚úÖ –û–ø–ª–∞—Ç–∞ –≤—ñ–¥: <b>{name} {surname}</b>\nüìû {phone}"
#     )

#     # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ç–∞–±–ª–∏—Ü—é
#     sheet.append_row([name, surname, phone])

#     await message.answer("–î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å —É –∑–±–æ—Ä—ñ! üíôüíõ")
#     await state.clear()

# # –ó–∞–ø—É—Å–∫
# async def main():
#     await dp.start_polling(bot)

# if __name__ == "__main__":
#     asyncio.run(main())


# python bot.py

# –ú–∞–π–∂–µ –≤—Å–µ —Ä–æ–±–∏—Ç—å –ª–∏—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≥–∞–Ω–µ

# import asyncio
# from aiogram import Bot, Dispatcher, types, F
# from aiogram.types import Message
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import State, StatesGroup
# from aiogram.fsm.storage.memory import MemoryStorage
# from aiogram.enums import ParseMode

# import gspread
# from oauth2client.service_account import ServiceAccountCredentials

# BOT_TOKEN = "8371853976:AAGxedICmLKYvjxSeQqBiZn_N95Hv0hrA1I"
# CHANNEL_ID = -1002575438586  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ ID —Ç–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É

# # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É (–±–∞–Ω–∫ –∑–±–æ—Ä—É)
# PAYMENT_LINK = "https://your-payment-link.example.com"

# # Google Sheets setup
# scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
# credentials = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
# client = gspread.authorize(credentials)
# sheet = client.open("UKbot").sheet1

# # FSM –¥–ª—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
# class Form(StatesGroup):
#     name = State()
#     surname = State()
#     phone = State()
#     proof = State()

# # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
# dp = Dispatcher(storage=MemoryStorage())

# # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 3-–∑–Ω–∞—á–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–∞–ø–∏—Å—ñ–≤ +1)
# def generate_certificate_number():
#     try:
#         records = sheet.get_all_records()
#         next_number = len(records) + 1
#         return f"{next_number:03d}"  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 001, 002, 003 ...
#     except Exception:
#         return "001"

# # –ö–æ–º–∞–Ω–¥–∞ /start
# @dp.message(F.text == "/start")
# async def start(message: Message, state: FSMContext):
#     await message.answer(
#         "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –∑–±–æ—Ä—É –Ω–∞ –±–ª–∞–≥–æ–¥—ñ–π–Ω—ñ—Å—Ç—å.\n\n"
#         "–ú–∏ –∑–±–∏—Ä–∞—î–º–æ –∫–æ—à—Ç–∏ –¥–ª—è –≤–∞–∂–ª–∏–≤–æ—ó —Å–ø—Ä–∞–≤–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–ø–æ–º–æ–∂–∏ –Ω–∞–º.\n\n"
#         "–î–ª—è –ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º‚Äô—è:"
#     )
#     await state.set_state(Form.name)

# # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ
# @dp.message(Form.name)
# async def get_name(message: Message, state: FSMContext):
#     await state.update_data(name=message.text)
#     await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –ø—Ä—ñ–∑–≤–∏—â–µ:")
#     await state.set_state(Form.surname)

# # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä—ñ–∑–≤–∏—â–∞
# @dp.message(Form.surname)
# async def get_surname(message: Message, state: FSMContext):
#     await state.update_data(surname=message.text)
#     await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (—É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX):")
#     await state.set_state(Form.phone)

# # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É —ñ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É
# @dp.message(Form.phone)
# async def get_phone(message: Message, state: FSMContext):
#     await state.update_data(phone=message.text)
#     await message.answer(
#         f"–î—è–∫—É—é! –û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–±–æ—Ä—É:\n\n"
#         f"<a href='{PAYMENT_LINK}'>–û–ø–ª–∞—Ç–∏—Ç–∏ —Ç—É—Ç</a>\n\n"
#         "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏."
#     )
#     await state.set_state(Form.proof)

# # –û–±—Ä–æ–±–∫–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É –∑ –æ–ø–ª–∞—Ç–æ—é
# @dp.message(Form.proof, F.photo)
# async def process_proof(message: Message, state: FSMContext):
#     data = await state.get_data()
#     name = data['name']
#     surname = data['surname']
#     phone = data['phone']
#     photo = message.photo[-1]  # –Ω–∞–π–≤–∏—â–∞ —è–∫—ñ—Å—Ç—å
#     file_id = photo.file_id

#     # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É
#     cert_number = generate_certificate_number()

#     # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
#     await bot.send_photo(
#         chat_id=CHANNEL_ID,
#         photo=file_id,
#         caption=(
#             f"‚úÖ –û–ø–ª–∞—Ç–∞ –≤—ñ–¥: <b>{name} {surname}</b>\n"
#             f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
#             f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É: {PAYMENT_LINK}\n"
#             f"üé´ –ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É: {cert_number}"
#         )
#     )

#     # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ç–∞–±–ª–∏—Ü—é: —ñ–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ, —Ç–µ–ª–µ—Ñ–æ–Ω, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É, –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É
#     sheet.append_row([name, surname, phone, PAYMENT_LINK, cert_number])

#     # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
#     await message.answer(
#         f"–î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å —É –±–ª–∞–≥–æ–¥—ñ–π–Ω–æ–º—É –∑–±–æ—Ä—ñ! üíôüíõ\n"
#         f"–í–∞—à –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É: <b>{cert_number}</b>"
#     )
#     await state.clear()

# # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# async def main():
#     await dp.start_polling(bot)

# if __name__ == "__main__":
#     asyncio.run(main())


import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode

import gspread
from oauth2client.service_account import ServiceAccountCredentials

BOT_TOKEN = "8371853976:AAGxedICmLKYvjxSeQqBiZn_N95Hv0hrA1I"
CHANNEL_ID = -1002575438586  # ID —Ç–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É (—á–∏—Å–ª–æ–≤–∏–π)
CHANNEL_USERNAME = "ukzbir"  # –±–µ–∑ @ ‚Äî –∫–æ—Ä–æ—Ç–∫–µ —ñ–º'—è —Ç–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É

# –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É (–±–∞–Ω–∫ –∑–±–æ—Ä—É)
PAYMENT_LINK = "https://your-payment-link.example.com"

# Google Sheets setup
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(credentials)
sheet = client.open("UKbot").sheet1

# FSM –¥–ª—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
class Form(StatesGroup):
    name = State()
    surname = State()
    phone = State()
    proof = State()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É (3-–∑–Ω–∞—á–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–∞–ø–∏—Å—ñ–≤ +1)
def generate_certificate_number():
    try:
        next_number = len(sheet.get_all_values())
        return f"{next_number:03d}"  # 001, 002, 003 ...
    except Exception:
        return "001"

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –∑–±–æ—Ä—É –Ω–∞ –±–ª–∞–≥–æ–¥—ñ–π–Ω—ñ—Å—Ç—å.\n\n"
        "–ú–∏ –∑–±–∏—Ä–∞—î–º–æ –∫–æ—à—Ç–∏ –¥–ª—è –≤–∞–∂–ª–∏–≤–æ—ó —Å–ø—Ä–∞–≤–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–ø–æ–º–æ–∂–∏ –Ω–∞–º.\n\n"
        "–î–ª—è –ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º‚Äô—è:"
    )
    await state.set_state(Form.name)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ
@dp.message(Form.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –ø—Ä—ñ–∑–≤–∏—â–µ:")
    await state.set_state(Form.surname)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä—ñ–∑–≤–∏—â–∞
@dp.message(Form.surname)
async def get_surname(message: Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (—É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX):")
    await state.set_state(Form.phone)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É —ñ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É
@dp.message(Form.phone)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer(
        f"–î—è–∫—É—é! –û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–±–æ—Ä—É:\n\n"
        f"<a href='{PAYMENT_LINK}'>–û–ø–ª–∞—Ç–∏—Ç–∏ —Ç—É—Ç</a>\n\n"
        "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏."
    )
    await state.set_state(Form.proof)

# –û–±—Ä–æ–±–∫–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É –∑ –æ–ø–ª–∞—Ç–æ—é
@dp.message(Form.proof, F.photo)
async def process_proof(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data['name']
    surname = data['surname']
    phone = data['phone']
    photo = message.photo[-1]  # –Ω–∞–π–≤–∏—â–∞ —è–∫—ñ—Å—Ç—å
    file_id = photo.file_id

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É
    cert_number = generate_certificate_number()

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª —ñ –æ—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    sent_msg = await bot.send_photo(
        chat_id=CHANNEL_ID,
        photo=file_id,
        caption=(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –≤—ñ–¥: <b>{name} {surname}</b>\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É: {PAYMENT_LINK}\n"
            f"üé´ –ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É: {cert_number}"
        )
    )

    # –§–æ—Ä–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ
    message_link = f"https://t.me/{CHANNEL_USERNAME}/{sent_msg.message_id}"

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ç–∞–±–ª–∏—Ü—é: —ñ–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ, —Ç–µ–ª–µ—Ñ–æ–Ω, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ, –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É
    sheet.append_row([name, surname, phone, message_link, cert_number])

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ –Ω–æ–º–µ—Ä–æ–º —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É —ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
    await message.answer(
        f"–î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å —É –±–ª–∞–≥–æ–¥—ñ–π–Ω–æ–º—É –∑–±–æ—Ä—ñ! üíôüíõ\n"
        f"–í–∞—à –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É: <b>{cert_number}</b>\n"
        
    )
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
